generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  sslaccept="accept_invalid_certs"
}

model EditorSettings {
  editorID           Int      @id @default(autoincrement())
  spellCheck         Boolean  @db.Boolean
  dictionaryLanguage String   @db.VarChar(255)
  tabWidth           Int
  columns            Int
  fontSize           Int
  fontFamily         String   @db.VarChar(255)
  SettingssettingsID Int
  Settings           Settings @relation(fields: [SettingssettingsID], references: [settingsID], onDelete: Cascade, onUpdate: NoAction)

  @@index([SettingssettingsID], map: "covers 1")
}

model OneTimeVerificationCode {
  codeID     Int      @id @default(autoincrement())
  code       String   @db.Char(6)
  expiresAt  DateTime @db.Timestamp(0)
  UseruserID Int
  User       User     @relation(fields: [UseruserID], references: [userID], onDelete: Cascade, onUpdate: NoAction)

  @@index([UseruserID], map: "completes")
}

model Settings {
  settingsID     Int              @id @default(autoincrement())
  UseruserID     Int
  User           User             @relation(fields: [UseruserID], references: [userID], onDelete: Cascade, onUpdate: NoAction)
  // CloudSettings  CloudSettings[]
  EditorSettings EditorSettings[]

  @@index([UseruserID], map: "changes")
}

model SubscriptionPlan {
  planID            Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  description       String
  price             Decimal             @db.Decimal(19, 2)
  duration          Int
  VaultSubscription VaultSubscription[]
}

model User {
  userID                  Int                       @id @default(autoincrement())
  firstName               String?                   @db.VarChar(255)
  lastName                String?                   @db.VarChar(255)
  email                   String                    @unique(map: "email") @db.VarChar(255)
  password                String                    @db.VarChar(255)
  verified                Boolean
  OneTimeVerificationCode OneTimeVerificationCode[]
  Settings                Settings[]
  VaultSubscription       VaultSubscription[]
}

model VaultSubscription {
  subID                  Int              @id @default(autoincrement())
  purchasedAt            DateTime         @db.Timestamp(0)
  recurring              Boolean
  SubscriptionPlanplanID Int
  UseruserID             Int
  SubscriptionPlan       SubscriptionPlan @relation(fields: [SubscriptionPlanplanID], references: [planID], onDelete: NoAction, onUpdate: NoAction)
  User                   User             @relation(fields: [UseruserID], references: [userID], onDelete: Cascade, onUpdate: NoAction)

  @@index([SubscriptionPlanplanID], map: "accommodates")
  @@index([UseruserID], map: "has")
}

model NotebookItem {
  id      String  @unique @id
  content String  @db.Text
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}
